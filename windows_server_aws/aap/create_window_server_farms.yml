---
- name: Provision a window server on AWS
  hosts: localhost


# This varible need to be define in the AAP Platform.
#
# project_name: ""
# routigTable_name: ""
# vpc_name: ""
# subnet_name: ""
# internet_gateway_name: ""
# security_group_name: ""
# key_name: ""
# region: "us-east-2"
# zone: "us-east-2a"
# image_id: "ami-0456f45d07f287a4f" server2019
# vpc_cidr_block: "10.0.0.0/16"
# subnet_cidr_block: "10.0.0.0/20"
# security_cidr_block: "0.0.0.0/0"
# destination_cidr_block: "0.0.0.0/0"
# server_name: ""

  tasks:
    - name: Create rsa key pair
      amazon.aws.ec2_key:
        name: "{{ key_name }}"
        key_type: rsa
        region: "{{ region }}"
      register: rsa_key

    # - name: debug__rsa_key
    #   ansible.builtin.debug:
    #     msg: "Key pair key: {{ rsa_key.key.private_key }}"

    - name: Create a VPC in AWS
      amazon.aws.ec2_vpc_net:
        name: "{{  vpc_name }}"
        cidr_block: "{{ vpc_cidr_block }}"
        region: "{{ region }}"
        tags:
          name: "vpc_ansible_window_demo"
          project: "{{ project_name }}"
      register: vpc 

    - name: Create a subnet for the VPC
      amazon.aws.ec2_vpc_subnet:
        vpc_id: "{{vpc.vpc.id}}"
        region: "{{ region }}"
        az: "{{ zone }}"
        state: present
        cidr: "{{ subnet_cidr_block }}"
        map_public: true
        tags:
          name: "{{ subnet_name }}"
          project: "{{ project_name }}"
      register: subnet_ids

    - name: Create the internet gateway for the VPC
      amazon.aws.ec2_vpc_igw:
        vpc_id: "{{vpc.vpc.id}}"
        region: "{{ region }}"
        state: present
        tags:
          name: "{{ internet_gateway_name }}"
          project: "{{ project_name }}"
      register: internet_gateway

    - name: Create a route table for the VPC
      amazon.aws.ec2_vpc_route_table:
        vpc_id: "{{vpc.vpc.id}}"
        region: "{{ region }}"
        state: present
        tags:
          name: "{{ routigTable_name }}"
          project: "{{ project_name }}"
        subnets: [ "{{ subnet_ids.subnet.id }}" ]
        # create routes
        routes:
          - dest: "{{ destination_cidr_block }}"
            gateway_id: "{{ internet_gateway.gateway_id }}"
      register: public_route_table

    - name: Create security group
      amazon.aws.ec2_group:
        name: "{{ security_group_name }}"
        description: "allow remote windows"
        vpc_id: "{{ vpc.vpc.id }}"
        region: "{{ region }}"
        tags:
          name: "{{ security_group_name }}"
          project: "{{ project_name }}"
        rules:
          - proto: tcp
            ports: 3389
            cidr_ip: "{{ security_cidr_block }}"
      register: securityGroup

    - name: Create EC2 instance
      amazon.aws.ec2_instance:
        instance_type: "{{ instance_type | default('t2.micro') }}"
        region: "{{ region }}"
        image_id: "{{ image_id }}"
        key_name: "{{ key_name }}"
        count: "1"
        wait: true
        state: present
        vpc_subnet_id: "{{subnet_ids.subnet.id}}"
        security_group: "{{ securityGroup.group_name }}"
        network_interfaces:
          - assign_public_ip: true
        tags:
          Name: "{{ item }}"
          Type: "windowServer"
          Env: "dev"
          Project: "{{ project_name }}"
          Provider: "AWS"
        volumes:
          - device_name: /dev/sda1
            ebs:
              volume_size: 30
              volume_type: gp2
              delete_on_termination: true
      loop: "{{ server_name }}"
      register: ec2_instance

    # - name: show instance
    #   debug:
    #     msg: "instance {{ ec2_instance.results[0].instances[0].instance_id }}"  

    - name: Wait until instance is running
      amazon.aws.ec2_instance_info:
        instance_ids: ["{{ ec2_instance.results[0].instances[0].instance_id }}"]
        region: "{{ region }}"
      register: ec2_info
      until: ec2_info.instances[0].state.name == "running"
      retries: 20
      delay: 15

    - name: Get admin password
      community.aws.ec2_win_password:
        instance_id: "{{ ec2_instance.results[0].instances[0].instance_id }}"
        region: "{{ region }}"
        key_data: '{{ lookup("env", "window_private_key" ) }}'
        wait: true
      register: password

    - name: show password
      debug:
        msg: "{{ password.win_password }}"  